import defaultLocale from "date-fns/locale/en-US";
import { DateAdapterInterface, DateAdapterFormats, DateAdapterOptions } from './DateAdapter.d';
declare type Locale = typeof defaultLocale;
declare class DateAdapter implements DateAdapterInterface<Date> {
    locale?: Locale;
    formats: DateAdapterFormats;
    constructor({ locale, formats }?: DateAdapterOptions);
    addDays(value: Date, count: number): Date;
    isValid(value: any): boolean;
    getDiff(value: Date, comparing: Date | string): number;
    isAfter(value: Date, comparing: Date): boolean;
    isBefore(value: Date, comparing: Date): boolean;
    startOfDay(value: Date): Date;
    getHours(value: Date): number;
    setHours(value: Date, count: number): Date;
    setMinutes(value: Date, count: number): Date;
    getSeconds(value: Date): number;
    setSeconds(value: Date, count: number): Date;
    isSameDay(value: Date, comparing: Date): boolean;
    isSameMonth(value: Date, comparing: Date): boolean;
    startOfMonth(value: Date): Date;
    startOfWeek(value: Date): Date;
    endOfWeek(value: Date): Date;
    date(value?: any): Date;
    toJsDate(value: Date): Date;
    parse(date: Date | string | number, formatString?: keyof DateAdapterFormats | string): Date;
    format(date: Date, formatKey?: keyof DateAdapterFormats | string): string;
    formatByString(date: Date, formatString?: string): string;
    reformat(str: string, oldFormat: string, newFormat: string): string;
    isEqual(date: any, comparing: any): boolean;
    isAfterDay(date: Date, value: Date): boolean;
    isBeforeDay(date: Date, value: Date): boolean;
    getMinutes(date: Date): number;
    getMonth(date: Date): number;
    getNextMonth(date: Date): Date;
    getPreviousMonth(date: Date): Date;
    mergeDateAndTime(date: Date, time: Date): Date;
    getWeekdays(): string[];
    getWeekArray(date: Date): Date[][];
}
export { DateAdapter, Locale };
export default DateAdapter;
